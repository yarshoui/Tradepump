name: Server

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: server

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: '14.x'
    - run: npm ci
      working-directory: services/server
    # - run: npm run build
    #   working-directory: services/server
    # - uses: actions/cache@v2
    #   id: restore-build
    #   with:
    #     path: ./services/server/build
    #     key: ${{ github.sha }}

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    # Ensure build job passes before testing image.
    needs: build

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      # - uses: actions/cache@v2
      #   id: restore-build
      #   with:
      #     path: ./services/server/build
      #     key: ${{ github.sha }}
      - name: Run tests
        run: docker buildx build --platform linux/amd64,linux/arm/v7,linux/arm64 --file Dockerfile .
        working-directory: services/server

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2
      # - uses: actions/cache@v2
      #   id: restore-build
      #   with:
      #     path: ./services/server/build
      #     key: ${{ github.sha }}

      - name: Build image
        run: |
          docker buildx build \
            --tag $IMAGE_NAME \
            --file Dockerfile \
            --platform linux/amd64,linux/arm/v7,linux/arm64 \
            .
        working-directory: services/server

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
        working-directory: services/server
